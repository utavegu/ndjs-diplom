21.04.23:

pubic/client/index:
1) Авторизация и токен
2) Вебсокеты
3) Формдата и файл (читай по формдате и делай файлчузер в паблик/клиент/индекс)

- Дропнуть базу и Тестирование апи через постман

- После тестирования всех мест с енв прикрути всё-таки конфиг, чисто в тренировочных целях. Понятно, что при использовании докер-композа тебе смысла в нём особого нет. Настройки подключения к БД через фабрику сделаешь и сервисы поинджектишь. Попробуешь с глобал и без. Также значения по умолчанию. Ещё, вероятно, там можно сразу преобразовывать тип значения при вытаскивании, но это не точно - проверь.
ConfigureService из @nestjs/config прикрути ближайшее время. Подключение к базе будет в директории config
https://docs.nestjs.com/techniques/configuration

README.me (в курсовой хороший образец, бери шаблон оттуда) с описанием проекта и вариантами его запуска

Вообще хэлперс можно переименовать в утилс и каждую вынести в отдельный файл

1) Создаешь ветку "прод"
2) Вытаскиваешь все тудусы сюда, с подробным объяснением где они лежали
3) Делаешь коммит
4) Грохаешь файл TODO и сдаешь на проверку ветку прод












Сделай валидацию айди через пайп и перехватывай прямо на этапе получения параметра (но и такой вариант тоже оставь, пригодится там, где это сделать невозможно)

Также на всё, что приходит с фронта, валидэйшн пайпы, если успеешь

Заготовить вопросы

- В общем с аутентификацией в сокетах через паспорт - ни в какую.
https://socket.io/how-to/use-with-express-session (вопрос преподавателю)

Сделал JWTAuthGuard глобальной. Спросить, почему она гарда и норм ли придумал. И почему такая порнография с 3 гардами

BACKLOG:

С ролями чата нужно будет тоже пошаманить, но чат уже на самый десерт - после модуля броней. Сделать второй декоратор - ролес. И вот его прикручивать к нужным ручкам чата, где условие "манагер и текущий юзер". Даже если правильный доступ не заработает, сделай максимально всё так, будто он работает. С вытаскиванием юзера из контекста двумя способами - через реквест и вторым способом - context.switchToWs().getClient().handshake.user;

- Пайпы (валидация), эксепшены и тд. сокетов. Перечитай теорию

Документация к малтеру
https://github.com/expressjs/multer/blob/master/doc/README-ru.md

Тут не надо, но в своем проекте пригодится:
https://www.npmjs.com/package/sharp

Документацию к апи сделай просто отдельным файлом md, со Сваггером тут, боюсь, могу не успеть

Еще нужно получше разобраться с работой сессий в данном проекте. Пасспорт или экспресс. В мэйне и аус-модуле

Разберись уже с дублированием асинк-эвэйтов в контроллерах и сервисах. По идее асинхронное только обращение в базу и значит эта обёртка нужна только в сервисе. (РЕФАКТОР)

Также надо что-то придумать с нэймингом методов контроллера и сервисов - когда они одинаковые, читаемость сильно падает (РЕФАКТОР)

Пабликами метить всё вроде как хороший тон, потому верни везже (РЕФАКТОР)

Слишком много однотипных оберток трай-кэтч. Они вообще нужны тут? Всё равно же эксепшн фильтр вроде норм перехватывает
лишние трайкэтчи? Проэкспериментируй на каком-нибудь сервисе

Инструкцию к АПИ или даже Сваггер обкатать - @nestjs/swagger

Аццесс токен, рефреш токен... или уже не тут, а в своем проекте с фронтом. Также в своем проекте не подрубаешь сервис админки монги. Все запросы делаешь через монго шел.

Вообще мне нравится не типизировать ручки контроллера, как по мне - дублирующий код. Но следует уточнить по этой теме. То, что у меня сервис интерфейс наследует - уже более чем достаточно, по моему.

Проблемы валидации формдаты через Joi. Также можно попробовать добить вопрос валидации через Joi ObjectId. Но мой текущий способ тоже норм, в целом.

Сделать валидацию id через Pipe, предвариетльно освежив инфу по пайпам

Для вебсокетов также валидации, пайпы, эксепшн фильтры и тд, так как есть нюансы и чтобы не забыть

На перспективу для твоего проекта. Можно через request.headers['user-agent'] проверять откуда зашел пользователь и если это не совпадает с его типичным местом - предупреждать на почту. Хотя это как-то более профессионально делается скорее всего. С участием ip, фингерпринта... поразбирайся в этой теме.

logger тоже неплохая штука, надо будет освоить после сдачи, можно прямо тут же

В своем проекте через класс валидатор делай валидацию, инструкция неста на нем
https://docs.nestjs.com/techniques/validation
В этом проекте я валидацию до ума не довёл, но в следующем обязательно закрой все эти дыры и используй другую либу валидации. И принцип работы пайпов хорошо изучи - их же можно прямо на отдельный параметр весить, и тд.
https://docs.nestjs.com/pipes#binding-validation-pipes
Ещё заметил, что валидэйшн пайпы глобальными делают, что мне не совсем понятно

В импортах порядок навести (РЕФАКТОР)

Важное по аутентификации из того, что в этом проекте у меня не реализовано:
- Соблюдение этих мер вкупе с частой ротацией Access/Refresh токенов должно помочь обеспечить высокий уровень безопасности на сайте.
- Cookies при правильном использовании являются адекватным и наиболее безопасным на данный момент решением для хранения JWT Access токена (реализовано, но тут смущает уточнение, что именно Access... Refresh, видимо, вообще нигде не храится. В общем поразбираешься еще)
- В идеале - через OAuth и отдельным микросервисом

Почитай по Partial в TS

Всю ту валидацию, которую делает малтер, уметь делать и на фронтенде.

Эмиттер делать через сокет-иошную оповещалку