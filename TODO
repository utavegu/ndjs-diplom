- Рефактор по тудусам
- ИвентЭмиттер в сокетах
- Аутентификация в сокетах (гарда не пускает, так как юзер не прикрепляется в реквест) - https://socket.io/how-to/use-with-express-session

И токен при логине похоже всё-таки нужно ретурнить, иначе не взлетит. Но надо будет потестить (когда будет фронтенд)

Фильтры и валидаторы - это вот не они ли хэлперс? (пока да, но лучше уточнить этот момент)
На сколько правильно то, что у меня в хэлперах
Вероятно, директория helpers должна выглядеть несколько иначе, уточни у Артема Ч. Никита говорит, что это то же самое что утилс, нечто, что может быть использовано в сервисах. А всех остальных ребят по их директориям выноси на один уровнь с модулями (РЕФАКТОР). Гарды в модуль авторизации, так как они имеют отношение только к нему

Почитай чего написал в jwt.auth.guard.ts и подумай как это улучшить, задай вопрос дипруку. Но сделаешь это после тестирования всей API

Малтер также настроить на ограничение веса файлов. И вероятно всю эту валидацию следует проводить уметь и на фронтэнде.

pubic/client/index:
1) Авторизация и токен
2) Вебсокеты
3) Формдата и файл

Через файлсистем автоматизировать создание public/img, если ее нет
Помни, что пустые папки на гитхабе не сохраняются и всегда проверяй наличие, перед сохранением туда файла. Если нет - создавай (через фс)

ПОХОЖЕ С ЭТОЙ ОШИБКОЙ НУЖНО РАЗОБРАТЬСЯ, ВОЗМОЖНО В НЕЙ КОРЕНЬ ПРОБЛЕМЫ
Возможно тут решение: https://stackoverflow.com/questions/64735881/typeerror-converting-circular-structure-to-json-starting-at-object-with-con
После реализации аутентификации через куки и логина такая вот ошибка, при этом приложение не валится:
[Nest] 289  - 04/06/2023, 11:19:46 AM   ERROR [ExceptionsHandler] Converting circular structure to JSON
aggregator-app     |     --> starting at object with constructor 'Socket'
aggregator-app     |     |     property '_writableState' -> object with constructor 'WritableState'
aggregator-app     |     |     property 'afterWriteTickInfo' -> object with constructor 'Object'
aggregator-app     |     --- property 'stream' closes the circle
aggregator-app     | TypeError: Converting circular structure to JSON
aggregator-app     |     --> starting at object with constructor 'Socket'
aggregator-app     |     |     property '_writableState' -> object with constructor 'WritableState'
aggregator-app     |     |     property 'afterWriteTickInfo' -> object with constructor 'Object'
aggregator-app     |     --- property 'stream' closes the circle
aggregator-app     |     at JSON.stringify (<anonymous>)
aggregator-app     |     at stringify (/app/node_modules/express/lib/response.js:1150:12)
aggregator-app     |     at ServerResponse.json (/app/node_modules/express/lib/response.js:271:14)
aggregator-app     |     at ExpressAdapter.reply (/app/node_modules/@nestjs/platform-express/adapters/express-adapter.js:61:62)
aggregator-app     |     at RouterResponseController.apply (/app/node_modules/@nestjs/core/router/router-response-controller.js:15:36)
aggregator-app     |     at /app/node_modules/@nestjs/core/router/router-execution-context.js:176:48
aggregator-app     |     at processTicksAndRejections (node:internal/process/task_queues:95:5)
aggregator-app     |     at /app/node_modules/@nestjs/core/router/router-execution-context.js:47:13
aggregator-app     |     at /app/node_modules/@nestjs/core/router/router-proxy.js:9:17

Поиск по TODO

Также на всё, что приходит с фронта, валидэйшн пайпы, если успеешь

С ролями чата нужно будет тоже пошаманить, но чат уже на самый десерт - после модуля броней

Еще нужно получше разобраться с работой сессий в данном проекте. Пасспорт или экспресс. В мэйне и аус-модуле

- После тестирования всех мест с енв прикрути всё-таки конфиг, чисто в тренировочных целях. Понятно, что при использовании докер-композа тебе смысла в нём особого нет. Настройки подключения к БД через фабрику сделаешь и сервисы поинджектишь. Попробуешь с глобал и без. Также значения по умолчанию. Ещё, вероятно, там можно сразу преобразовывать тип значения при вытаскивании, но это не точно - проверь.
ConfigureService из @nestjs/config прикрути ближайшее время.

README.me с описанием проекта и вариантами его запуска (А тот файл переименуй в техзадание)

Когда будешь сдавать, сделай ветку prod и там все комментарии и тудусы почисти



BACKLOG:

Документация к малтеру
https://github.com/expressjs/multer/blob/master/doc/README-ru.md

Тут не надо, но в своем проекте пригодится:
https://www.npmjs.com/package/sharp

Документацию к апи сделай просто отдельным файлом md, со Сваггером тут, боюсь, могу не успеть

Разберись уже с дублированием асинк-эвэйтов в контроллерах и сервисах. По идее асинхронное только обращение в базу и значит эта обёртка нужна только в сервисе. (РЕФАКТОР)

Также надо что-то придумать с нэймингом методов контроллера и сервисов - когда они одинаковые, читаемость сильно падает (РЕФАКТОР)

Пабликами метить всё вроде как хороший тон, потому верни везже (РЕФАКТОР)

Слишком много однотипных оберток трай-кэтч. Они вообще нужны тут? Всё равно же эксепшн фильтр вроде норм перехватывает
лишние трайкэтчи? Проэкспериментируй на каком-нибудь сервисе

Инструкцию к АПИ или даже Сваггер обкатать - @nestjs/swagger

Аццесс токен, рефреш токен... или уже не тут, а в своем проекте с фронтом. Также в своем проекте не подрубаешь сервис админки монги. Все запросы делаешь через монго шел.

Вообще мне нравится не типизировать ручки контроллера, как по мне - дублирующий код. Но следует уточнить по этой теме. То, что у меня сервис интерфейс наследует - уже более чем достаточно, по моему.

Проблемы валидации формдаты через Joi. Также можно попробовать добить вопрос валидации через Joi ObjectId. Но мой текущий способ тоже норм, в целом.

Сделать валидацию id через Pipe, предвариетльно освежив инфу по пайпам

Для вебсокетов также валидации, пайпы, эксепшн фильтры и тд, так как есть нюансы и чтобы не забыть

На перспективу для твоего проекта. Можно через request.headers['user-agent'] проверять откуда зашел пользователь и если это не совпадает с его типичным местом - предупреждать на почту. Хотя это как-то более профессионально делается скорее всего. С участием ip, фингерпринта... поразбирайся в этой теме.

logger тоже неплохая штука, надо будет освоить после сдачи, можно прямо тут же

В своем проекте через класс валидатор делай валидацию, инструкция неста на нем
https://docs.nestjs.com/techniques/validation
В этом проекте я валидацию до ума не довёл, но в следующем обязательно закрой все эти дыры и используй другую либу валидации. И принцип работы пайпов хорошо изучи - их же можно прямо на отдельный параметр весить, и тд.
https://docs.nestjs.com/pipes#binding-validation-pipes
Ещё заметил, что валидэйшн пайпы глобальными делают, что мне не совсем понятно

В импортах порядок навести (РЕФАКТОР)

Важное по аутентификации из того, что в этом проекте у меня не реализовано:
- Соблюдение этих мер вкупе с частой ротацией Access/Refresh токенов должно помочь обеспечить высокий уровень безопасности на сайте.
- Cookies при правильном использовании являются адекватным и наиболее безопасным на данный момент решением для хранения JWT Access токена (реализовано, но тут смущает уточнение, что именно Access... Refresh, видимо, вообще нигде не храится. В общем поразбираешься еще)

Почитай по Partial в TS